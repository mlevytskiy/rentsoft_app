# –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é API

## –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å
–¶—è —Ñ—ñ—á–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –≥–Ω—É—á–∫–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é API, –≤–∫–ª—é—á–∞—é—á–∏ URL —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É. –í–æ–Ω–∞ –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏—Å—è –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞–º–∏ API (—Ä–æ–∑—Ä–æ–±–∫–∞, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–æ–¥–∞–∫—à–Ω), –≤–∏–±–∏—Ä–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∞–≤—Ç–æ–ø–∞—Ä–∫–∏ —Ç–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ –æ—Ñ–ª–∞–π–Ω. –í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –∑–∞—Ö–∏—â–µ–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ, –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ —ó—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏.

## –ö–ª—é—á–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏

### 1. ApiConfigService (lib/core/services/api_config_service.dart)
–°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–∑–æ–≤–∏–º URL API —Ç–∞ —Ä–µ–∂–∏–º–æ–º –æ—Ñ–ª–∞–π–Ω.

```dart
class ApiConfigService {
  static const String _baseUrlKey = 'api_base_url';
  static const String _defaultBaseUrl = 'http://rentsoft-env-1.eba-xkfjndpj.us-east-1.elasticbeanstalk.com/api';
  static const String _noInternetValue = 'no-internet';
  
  final FlutterSecureStorage _secureStorage;
  String? _cachedBaseUrl;
  
  // –ü–∞—Ç–µ—Ä–Ω Singleton –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤
  static final ApiConfigService _instance = ApiConfigService._internal();
  
  factory ApiConfigService() => _instance;
  
  ApiConfigService._internal() : _secureStorage = const FlutterSecureStorage();
  
  // –°–ø–∏—Å–æ–∫ —Å–ª—É—Ö–∞—á—ñ–≤ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ URL
  final List<Function> _urlChangeListeners = [];

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL
  Future<String> getBaseUrl() async {
    if (_cachedBaseUrl != null) return _cachedBaseUrl!;
    
    String? storedUrl = await _secureStorage.read(key: _baseUrlKey);
    if (storedUrl == null) {
      await setBaseUrl(_defaultBaseUrl);
      return _defaultBaseUrl;
    }
    
    _cachedBaseUrl = storedUrl;
    return storedUrl;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL
  Future<void> setBaseUrl(String url) async {
    if (url.isEmpty) url = _defaultBaseUrl;
    
    await _secureStorage.write(key: _baseUrlKey, value: url);
    final oldUrl = _cachedBaseUrl;
    _cachedBaseUrl = url;
    
    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É URL
    if (oldUrl != url) {
      _notifyUrlChangeListeners();
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É –æ—Ñ–ª–∞–π–Ω
  Future<bool> isOfflineMode() async {
    final url = await getBaseUrl();
    return url == _noInternetValue;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –æ—Ñ–ª–∞–π–Ω
  Future<void> setOfflineMode(bool offline) async {
    final currentUrl = await getBaseUrl();
    if (offline && currentUrl != _noInternetValue) {
      await setBaseUrl(_noInternetValue);
    } else if (!offline && currentUrl == _noInternetValue) {
      await setBaseUrl(_defaultBaseUrl);
    }
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –∑–º—ñ–Ω URL
  void addUrlChangeListener(Function callback) {
    if (!_urlChangeListeners.contains(callback)) {
      _urlChangeListeners.add(callback);
    }
  }

  void removeUrlChangeListener(Function callback) {
    _urlChangeListeners.remove(callback);
  }

  void _notifyUrlChangeListeners() {
    for (var callback in _urlChangeListeners) {
      callback();
    }
  }
}
```

### 2. ScenarioService (lib/core/services/scenario_service.dart)
–°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É —Ç–∞ —ñ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—é.

```dart
class ScenarioService {
  static const String _fleetIdKey = 'fleet_id';
  final FlutterSecureStorage _secureStorage;
  String? _cachedFleetId;
  
  // –ü–∞—Ç–µ—Ä–Ω Singleton –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–µ—Ä–≤—ñ—Å—É
  static final ScenarioService _instance = ScenarioService._internal();
  
  factory ScenarioService() => _instance;
  
  ScenarioService._internal() : _secureStorage = const FlutterSecureStorage();

  // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
  ScenarioService.withStorage(this._secureStorage);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É
  Future<String?> getFleetId() async {
    _cachedFleetId = await _secureStorage.read(key: _fleetIdKey);
    return _cachedFleetId;
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É
  Future<void> setFleetId(String? fleetId) async {
    if (fleetId == null || fleetId.isEmpty) {
      await _secureStorage.delete(key: _fleetIdKey);
      _cachedFleetId = null;
    } else {
      await _secureStorage.write(key: _fleetIdKey, value: fleetId);
      _cachedFleetId = fleetId;
    }
  }
}
```

### 3. SecretScreen (lib/features/secret/screens/secret_screen.dart)
–ï–∫—Ä–∞–Ω –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API, –≤–∫–ª—é—á–∞—é—á–∏ URL —Ç–∞ ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É.

```dart
class _SecretScreenState extends State<SecretScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _apiUrlController = TextEditingController();
  final TextEditingController _fleetIdController = TextEditingController();
  final ApiConfigService _apiConfigService = ApiConfigService();
  final ScenarioService _scenarioService = getIt<ScenarioService>();
  bool _isLoading = false;
  bool _isOfflineMode = false;

  @override
  void initState() {
    super.initState();
    _loadCurrentSettings();
  }

  Future<void> _loadCurrentSettings() async {
    setState(() => _isLoading = true);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è URL API
    final baseUrl = await _apiConfigService.getBaseUrl();
    _isOfflineMode = baseUrl == 'no-internet';
    
    if (!_isOfflineMode) {
      _apiUrlController.text = baseUrl;
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É
    final fleetId = await _scenarioService.getFleetId();
    if (fleetId != null) {
      _fleetIdController.text = fleetId;
    }
    
    setState(() => _isLoading = false);
  }

  Future<void> _saveSettings() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      
      try {
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è URL API
        if (_isOfflineMode) {
          await _apiConfigService.setOfflineMode(true);
        } else {
          await _apiConfigService.setBaseUrl(_apiUrlController.text);
        }
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É
        await _scenarioService.setFleetId(_fleetIdController.text);
        
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ')),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞: ${e.toString()}')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  // –ü–æ–±—É–¥–æ–≤–∞ UI –µ–∫—Ä–∞–Ω—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...
}
```

### 4. ApiClient (lib/core/api/api_client.dart)
–ö–ª—ñ—î–Ω—Ç API, —è–∫–∏–π –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ –∑–º—ñ–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.

```dart
class ApiClient {
  final Dio _dio = Dio();
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();
  final ApiConfigService _apiConfigService = ApiConfigService();
  String? _baseUrl;

  ApiClient() {
    _initializeClient();
  }

  Future<void> _initializeClient() async {
    _baseUrl = await _apiConfigService.getBaseUrl();
    
    _dio.options.baseUrl = _baseUrl!;
    _dio.options.connectTimeout = const Duration(seconds: 10);
    _dio.options.receiveTimeout = const Duration(seconds: 10);
    _dio.options.headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    // –ü–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞–º–∏ —Ç–∞ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–æ–º
    _dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
          final baseUrl = await _apiConfigService.getBaseUrl();
          if (baseUrl == 'no-internet') {
            print('[API] ‚ö†Ô∏è Offline mode detected, rejecting request: ${options.path}');
            return handler.reject(
              DioException(
                requestOptions: options,
                type: DioExceptionType.connectionError, 
                message: 'API calls are disabled in offline mode',
              ),
              true,
            );
          }
          
          // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —è–∫—â–æ –≤—ñ–Ω —î
          final token = await _secureStorage.read(key: 'access_token');
          if (token != null) {
            options.headers['Authorization'] = 'Bearer $token';
          }
          
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ –±–∞–∑–æ–≤–æ–≥–æ URL
          final currentBaseUrl = await _apiConfigService.getBaseUrl();
          if (_baseUrl != currentBaseUrl && currentBaseUrl != 'no-internet') {
            _baseUrl = currentBaseUrl;
            _dio.options.baseUrl = _baseUrl!;
            print('[API] üîÑ URL –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: $_baseUrl');
          }
          
          print('[API] üöÄ REQUEST: ${options.method} ${options.path}');
          return handler.next(options);
        },
        // –Ü–Ω—à—ñ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —ñ –ø–æ–º–∏–ª–æ–∫...
      ),
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è URL
  Future<void> refreshBaseUrl() async {
    final currentBaseUrl = await _apiConfigService.getBaseUrl();
    if (_baseUrl != currentBaseUrl) {
      _baseUrl = currentBaseUrl;
      if (currentBaseUrl != 'no-internet') {
        _dio.options.baseUrl = _baseUrl!;
      }
      print('[API] üîÑ URL –ø—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: $_baseUrl');
    }
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ (GET, POST, PUT, DELETE)...
}
```

## –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É

### –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ó–º—ñ–Ω–∞ URL API
1. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—î Secret Screen
2. –£ –ø–æ–ª—ñ "API URL" –≤–≤–æ–¥–∏—Ç—å –Ω–æ–≤–∏–π URL, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `http://staging-api.example.com/api`
3. –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–ó–±–µ—Ä–µ–≥—Ç–∏"
4. –ù–æ–≤–∏–π URL –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –∑–∞—Ö–∏—â–µ–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
5. ApiConfigService –æ–ø–æ–≤—ñ—â–∞—î –≤—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É URL
6. ApiClient –æ–Ω–æ–≤–ª—é—î –±–∞–∑–æ–≤–∏–π URL –¥–ª—è –≤—Å—ñ—Ö –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
7. CarSearchScreen —Ä–µ–∞–≥—É—î –Ω–∞ –∑–º—ñ–Ω—É URL —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤

### –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É
1. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—î Secret Screen
2. –£ –ø–æ–ª—ñ "Fleet ID" –≤–≤–æ–¥–∏—Ç—å ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "12345"
3. –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–ó–±–µ—Ä–µ–≥—Ç–∏"
4. ID –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –∑–∞—Ö–∏—â–µ–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ —á–µ—Ä–µ–∑ ScenarioService
5. –ü—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –µ–∫—Ä–∞–Ω—É –ø–æ—à—É–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ü–µ–π ID –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤

### –°—Ü–µ–Ω–∞—Ä—ñ–π 3: –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤ —Ä–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω
1. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—î Secret Screen
2. –í–º–∏–∫–∞—î –ø–µ—Ä–µ–º–∏–∫–∞—á "Without Internet"
3. –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–ó–±–µ—Ä–µ–≥—Ç–∏"
4. ApiConfigService –∑–±–µ—Ä—ñ–≥–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è 'no-internet' –∑–∞–º—ñ—Å—Ç—å URL
5. ApiClient –±–ª–æ–∫—É—î –≤—Å—ñ —Ä–µ–∞–ª—å–Ω—ñ API-–∑–∞–ø–∏—Ç–∏
6. CarService –ø–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–∫—ñ–≤ –∑–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö

## –í–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
–Ø–∫—â–æ —Ñ—ñ—á–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:

1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ FlutterSecureStorage –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î —Ç–∞ –∑—á–∏—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è
2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ ApiConfigService –∫–æ—Ä–µ–∫—Ç–Ω–æ –∫–µ—à—É—î —Ç–∞ –æ–Ω–æ–≤–ª—é—î URL
3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ ScenarioService –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î —Ç–∞ –Ω–∞–¥–∞—î ID –∞–≤—Ç–æ–ø–∞—Ä–∫—É
4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ ApiClient –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è —Ç–∞ —Ä–µ–∞–≥—É—î –Ω–∞ –∑–º—ñ–Ω–∏ URL
5. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–∏—Å—Ç–µ–º–∞ —Å–ª—É—Ö–∞—á—ñ–≤ –∑–º—ñ–Ω URL –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ
6. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —Ä–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω –≤ —É—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º–∏
7. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ –ø–æ—à—É–∫—É –ø–æ–º–∏–ª–æ–∫
