import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:rentsoft_app/features/home/screens/home_screen.dart';

import '../../../core/api/api_client.dart';
import '../../../core/di/service_locator.dart';
import '../../../core/services/api_config_service.dart';
import '../../../core/services/scenario_service.dart';
import '../../secret/screens/secret_screen.dart';
import '../bloc/auth_bloc.dart';
import '../bloc/auth_event.dart';
import '../bloc/auth_state.dart';
import '../services/mock_data_service.dart';
import 'response_view_screen.dart'; // –î–æ–¥–∞–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –µ–∫—Ä–∞–Ω—É
import 'verification_screen.dart';

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  State<AuthScreen> createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> with WidgetsBindingObserver {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  final _surnameController = TextEditingController();
  final _apiConfigService = ApiConfigService();
  final _apiClient = getIt<ApiClient>();
  final _scenarioService = getIt<ScenarioService>();

  bool _isLogin = true;
  bool _isPasswordVisible = false;
  bool _isAdminMode = false; // –î–æ–¥–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–∂–∏–º—É
  bool _showSecretButton = false; // –ö–æ–Ω—Ç—Ä–æ–ª—é—î –≤–∏–¥–∏–º—ñ—Å—Ç—å –∂–æ–≤—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  FleetMode _fleetMode = FleetMode.all; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∞–≤—Ç–æ–ø–∞—Ä–∫–∏

  // –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
  final List<DateTime> _tapTimestamps = [];

  @override
  void initState() {
    super.initState();
    // –†–µ—î—Å—Ç—Ä—É—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á –∑–∞ –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º
    WidgetsBinding.instance.addObserver(this);
    _refreshConfiguration();
    _loadFleetMode();
  }

  @override
  void dispose() {
    // –°–∫–∞—Å–æ–≤—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞
    WidgetsBinding.instance.removeObserver(this);
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    _surnameController.dispose();
    super.dispose();
  }

  // –î–æ–¥–∞–Ω–æ –º–µ—Ç–æ–¥ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –µ–∫—Ä–∞–Ω
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–Ω—É –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –¥–æ–¥–∞—Ç–∫–∞
    super.didChangeAppLifecycleState(state);

    if (state == AppLifecycleState.resumed) {
      // –Ø–∫—â–æ –¥–æ–¥–∞—Ç–æ–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      _loadFleetMode();
    }
  }

  // –î–æ–¥–∞–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –∑–º—ñ–Ω–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ Flutter
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    //TODO@m.levytskyi: this refresh brake admin functionality. That's why I commented it
    // _refreshConfiguration();
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (–≤–∫–ª—é—á–∞—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω)
    // _loadFleetMode();
    // print('[AuthScreen] –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π');
  }

  @override
  void didUpdateWidget(covariant AuthScreen oldWidget) {
    super.didUpdateWidget(oldWidget);
    _loadFleetMode(); // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –µ–∫—Ä–∞–Ω
  }

  // –û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é API –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –µ–∫—Ä–∞–Ω—É
  Future<void> _refreshConfiguration() async {
    await _apiClient.refreshBaseUrl();
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è URL
    final isOfflineMode = await _apiConfigService.isOfflineMode();
    print('[AuthScreen] üåê –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏: ${isOfflineMode ? '–ë–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É' : '–ó —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º'}');

    // –û–Ω–æ–≤–ª—é—î–º–æ AuthBloc —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (mounted && context.mounted) {
      context.read<AuthBloc>().add(AuthCheckStatusEvent());
    }
  }

  void _toggleAuthMode() {
    setState(() {
      _isLogin = !_isLogin;
    });
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      if (_isLogin) {
        context.read<AuthBloc>().add(
              AuthLoginEvent(
                email: _emailController.text,
                password: _passwordController.text,
                isAdmin: _isAdminMode, // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ñ–ª–∞–≥ –∞–¥–º—ñ–Ω–∞
              ),
            );
      } else {
        // –ü—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        final email = _emailController.text.trim();
        final password = _passwordController.text;
        final name = _nameController.text.trim();
        final surname = _surnameController.text.trim();

        // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ AuthBloc
        context.read<AuthBloc>().add(
              AuthRegisterEvent(
                email: email,
                password: password,
                name: name,
                surname: surname,
              ),
            );
      }
    }
  }

  void _fillWithMockData() {
    // Get random mock user data
    final mockUser = MockDataService.getRandomUser();

    // Fill all form fields regardless of mode
    _emailController.text = mockUser.email;
    _passwordController.text = mockUser.password;
    _nameController.text = mockUser.firstName;
    _surnameController.text = mockUser.lastName;

    // –ü—Ä–∏–±—Ä–∞–Ω–æ Snackbar –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
  }

  void _handleTitleTap() {
    final now = DateTime.now();

    // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    _tapTimestamps.add(now);

    // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
    _tapTimestamps.removeWhere((timestamp) => now.difference(timestamp).inSeconds > 2);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ 5 –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 2 —Å–µ–∫—É–Ω–¥
    if (_tapTimestamps.length >= 5) {
      setState(() {
        // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ (—è–∫—â–æ –≤–∏–¥–Ω–æ - —Ö–æ–≤–∞—î–º–æ, —è–∫—â–æ —Å—Ö–æ–≤–∞–Ω–∞ - –ø–æ–∫–∞–∑—É—î–º–æ)
        _showSecretButton = !_showSecretButton;
        // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –ø—ñ—Å–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏
        _tapTimestamps.clear();
      });
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–ø–∞—Ä–∫—ñ–≤
  Future<void> _loadFleetMode() async {
    if (!mounted) return; // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–∂–µ—Ç —â–µ –≤ –¥–µ—Ä–µ–≤—ñ

    final fleetMode = await _scenarioService.getFleetMode();

    // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–±–∞–≥—É
    print('[AuthScreen] –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–∞—Ä–∫—ñ–≤: $fleetMode');

    if (mounted) {
      setState(() {
        _fleetMode = fleetMode;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: BlocConsumer<AuthBloc, AuthState>(
        listener: (context, state) {
          if (state is AuthAdminResponse) {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –µ–∫—Ä–∞–Ω –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é —Å–µ—Ä–≤–µ—Ä–∞
            Navigator.of(context).pushReplacement(
              MaterialPageRoute(
                builder: (context) => ResponseViewScreen(responseData: state.responseData),
              ),
            );
          } else if (state is AuthFailure) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.error)),
            );
          } else if (state is AuthAuthenticated && state.isNewUser) {
            Navigator.of(context).pushReplacement(
              MaterialPageRoute(
                builder: (context) => VerificationScreen(user: state.user),
              ),
            );
          } else if (state is AuthAuthenticated && !state.isNewUser) {
            Navigator.of(context).pushReplacement(
              MaterialPageRoute(
                builder: (context) => const HomeScreen(),
              ),
            );
          }
        },
        builder: (context, state) {
          if (state is AuthLoading) {
            return const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(color: Color(0xFF3F5185)),
                  SizedBox(height: 16),
                  Text(
                    '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
                    style: TextStyle(fontSize: 16),
                  ),
                ],
              ),
            );
          }

          return SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const SizedBox(height: 20),
                    // Logo or App name with buttons positioned on top
                    Stack(
                      children: [
                        // Title and subtitle in the center
                        Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              // –Ü–∫–æ–Ω–∫–∞
                              Stack(
                                alignment: Alignment.center,
                                children: [
                                  Image.asset(
                                    'assets/images/frame.png',
                                    width: 72,
                                    height: 72,
                                  ),
                                  Image.asset(
                                    'assets/images/auth_logo.png',
                                    width: 27,
                                    height: 27,
                                  ),
                                ],
                              ),

                              const SizedBox(height: 24),

                              // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É —Ñ–ª–æ—Ç—É
                              if (_fleetMode == FleetMode.all) ...[
                                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å—ñ—Ö –∞–≤—Ç–æ–ø–∞—Ä–∫—ñ–≤
                                GestureDetector(
                                  onTap: _handleTitleTap,
                                  child: const Text(
                                    'RentSoft',
                                    textAlign: TextAlign.center,
                                    style: TextStyle(
                                      fontSize: 28,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                                const Text(
                                  '–û—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω –≤ –£–∫—Ä–∞—ó–Ω—ñ',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    fontSize: 22,
                                    color: Colors.black87,
                                  ),
                                ),
                              ] else ...[
                                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–∞—Ä–∫—É
                                GestureDetector(
                                  onTap: _handleTitleTap,
                                  child: Text(
                                    _scenarioService.fleetName,
                                    textAlign: TextAlign.center,
                                    style: const TextStyle(
                                      fontSize: 32,
                                      fontWeight: FontWeight.bold,
                                      color: Color(0xFF1A1B21),
                                    ),
                                  ),
                                ),
                                const SizedBox(height: 8),
                                const Text(
                                  '–û—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    fontSize: 22,
                                    fontWeight: FontWeight.w500,
                                    color: Color(0xFF44464F),
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  _scenarioService.fleetAddress,
                                  textAlign: TextAlign.center,
                                  style: const TextStyle(
                                    fontSize: 16,
                                    color: Color(0xFF44464F),
                                  ),
                                ),
                              ],
                            ],
                          ),
                        ),
                        // Buttons positioned at the top-right corner
                        Positioned(
                          top: 0,
                          right: 0,
                          child: Row(
                            children: [
                              ElevatedButton(
                                onPressed: _fillWithMockData,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.red,
                                  foregroundColor: Colors.white,
                                  shape: const CircleBorder(),
                                  padding: const EdgeInsets.all(4),
                                ),
                                child: const Icon(
                                  Icons.auto_fix_high,
                                  size: 18,
                                ),
                              ),
                              const SizedBox(width: 16),
                              _showSecretButton
                                  ? ElevatedButton(
                                      onPressed: () async {
                                        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Secret Screen –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                                        await Navigator.of(context).push(
                                          MaterialPageRoute(
                                            builder: (context) => const SecretScreen(),
                                          ),
                                        );

                                        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ Secret Screen
                                        if (mounted) {
                                          await _loadFleetMode();
                                          print('[AuthScreen] –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∂–∏–º –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ Secret Screen');
                                        }
                                      },
                                      style: ElevatedButton.styleFrom(
                                        backgroundColor: Colors.amber,
                                        foregroundColor: Colors.white,
                                        shape: const CircleBorder(),
                                        padding: const EdgeInsets.all(4),
                                      ),
                                      child: const Icon(
                                        Icons.vpn_key,
                                        size: 18,
                                      ),
                                    )
                                  : const SizedBox(),
                            ],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 40),

                    // Email Field
                    TextFormField(
                      controller: _emailController,
                      decoration: const InputDecoration(
                        labelText: 'Email',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.email),
                      ),
                      keyboardType: TextInputType.emailAddress,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter your email';
                        }
                        if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                          return 'Please enter a valid email';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Password Field
                    TextFormField(
                      controller: _passwordController,
                      obscureText: !_isPasswordVisible,
                      decoration: InputDecoration(
                        labelText: '–ü–∞—Ä–æ–ª—å',
                        border: const OutlineInputBorder(),
                        prefixIcon: const Icon(Icons.lock),
                        suffixIcon: IconButton(
                          icon: Icon(
                            _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                          ),
                          onPressed: () {
                            setState(() {
                              _isPasswordVisible = !_isPasswordVisible;
                            });
                          },
                        ),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Checkbox for admin mode - visible only in login mode
                    if (_isLogin) ...[
                      Row(
                        children: [
                          Checkbox(
                            value: _isAdminMode,
                            onChanged: (value) {
                              setState(() {
                                _isAdminMode = value ?? false;

                                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
                                if (_isAdminMode) {
                                  _emailController.text = 'admin@gmail.com';
                                  _passwordController.text = 'Notfoundpass1!';
                                } else {
                                  // –Ø–∫—â–æ –∑–Ω—è—Ç–æ –≥–∞–ª–æ—á–∫—É, –æ—á–∏—â–∞—î–º–æ –ø–æ–ª—è
                                  _emailController.text = '';
                                  _passwordController.text = '';
                                }
                              });
                            },
                            activeColor: const Color(0xFF3F5185),
                          ),
                          const Text('–£–≤—ñ–π—Ç–∏ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä'),
                        ],
                      ),
                      const SizedBox(height: 8),
                    ],

                    // Registration fields
                    if (!_isLogin) ...[
                      TextFormField(
                        controller: _nameController,
                        decoration: const InputDecoration(
                          labelText: "–Ü–º'—è",
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.person),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è";
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                      TextFormField(
                        controller: _surnameController,
                        decoration: const InputDecoration(
                          labelText: '–ü—Ä—ñ–∑–≤–∏—â–µ',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.person),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                    ],

                    // Submit Button
                    ElevatedButton(
                      onPressed: _submitForm,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF3F5185), // Navy blue color
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(100),
                        ),
                        minimumSize: const Size(double.infinity, 48),
                      ),
                      child: Text(
                        _isLogin ? '–£–í–Ü–ô–¢–ò' : '–ó–ê–†–ï–Ñ–°–¢–†–£–í–ê–¢–ò–°–Ø',
                        style: const TextStyle(fontSize: 16),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // Toggle Button
                    TextButton(
                      onPressed: _toggleAuthMode,
                      child: Text(
                        _isLogin ? '–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—É? –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è' : '–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç? –£–≤—ñ–π—Ç–∏',
                      ),
                    ),

                    const SizedBox(height: 20),

                    // –¢–µ–∫—Å—Ç –ø—Ä–æ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ - –∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–∏–π
                    const SizedBox(height: 12),
                    RichText(
                      textAlign: TextAlign.center,
                      text: const TextSpan(
                        style: TextStyle(
                          color: Color(0xFF585F72),
                          fontSize: 12,
                        ),
                        children: [
                          TextSpan(text: '–†–µ—î—Å—Ç—É—é—á–∏—Å—å, —è –ø–æ–≥–æ–¥–∂—É—é—Å—è –∑ '),
                          TextSpan(
                            text: '–£–º–æ–≤–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è',
                            style: TextStyle(
                              decoration: TextDecoration.underline,
                              color: Color(0xFF625B71),
                            ),
                          ),
                          TextSpan(text: ' —Ç–∞ '),
                          TextSpan(
                            text: '–ü–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ',
                            style: TextStyle(
                              decoration: TextDecoration.underline,
                              color: Color(0xFF625B71),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
